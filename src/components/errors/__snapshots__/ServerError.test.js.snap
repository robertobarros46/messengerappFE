// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ServerError /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ServerError />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1
          className="server-error-title"
        >
          500
        </h1>,
        <div
          className="server-error-desc"
        >
          Oops! Algo de inesperado occoreu em nosso servidor. Tente voltar!
        </div>,
        <Link
          replace={false}
          to="/"
        >
          <Button
            block={false}
            className="server-error-go-back-btn"
            ghost={false}
            loading={false}
            prefixCls="ant-btn"
            size="large"
            type="primary"
          >
            Go Back
          </Button>
        </Link>,
      ],
      "className": "server-error-page",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "500",
          "className": "server-error-title",
        },
        "ref": null,
        "rendered": "500",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Oops! Algo de inesperado occoreu em nosso servidor. Tente voltar!",
          "className": "server-error-desc",
        },
        "ref": null,
        "rendered": "Oops! Algo de inesperado occoreu em nosso servidor. Tente voltar!",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Button
            block={false}
            className="server-error-go-back-btn"
            ghost={false}
            loading={false}
            prefixCls="ant-btn"
            size="large"
            type="primary"
          >
            Go Back
          </Button>,
          "replace": false,
          "to": "/",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "block": false,
            "children": "Go Back",
            "className": "server-error-go-back-btn",
            "ghost": false,
            "loading": false,
            "prefixCls": "ant-btn",
            "size": "large",
            "type": "primary",
          },
          "ref": null,
          "rendered": "Go Back",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="server-error-title"
          >
            500
          </h1>,
          <div
            className="server-error-desc"
          >
            Oops! Algo de inesperado occoreu em nosso servidor. Tente voltar!
          </div>,
          <Link
            replace={false}
            to="/"
          >
            <Button
              block={false}
              className="server-error-go-back-btn"
              ghost={false}
              loading={false}
              prefixCls="ant-btn"
              size="large"
              type="primary"
            >
              Go Back
            </Button>
          </Link>,
        ],
        "className": "server-error-page",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "500",
            "className": "server-error-title",
          },
          "ref": null,
          "rendered": "500",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Oops! Algo de inesperado occoreu em nosso servidor. Tente voltar!",
            "className": "server-error-desc",
          },
          "ref": null,
          "rendered": "Oops! Algo de inesperado occoreu em nosso servidor. Tente voltar!",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Button
              block={false}
              className="server-error-go-back-btn"
              ghost={false}
              loading={false}
              prefixCls="ant-btn"
              size="large"
              type="primary"
            >
              Go Back
            </Button>,
            "replace": false,
            "to": "/",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": false,
              "children": "Go Back",
              "className": "server-error-go-back-btn",
              "ghost": false,
              "loading": false,
              "prefixCls": "ant-btn",
              "size": "large",
              "type": "primary",
            },
            "ref": null,
            "rendered": "Go Back",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
